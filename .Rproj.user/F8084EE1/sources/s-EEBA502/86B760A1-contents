require(tidyverse)
require(Matrix)


# Aplicar -----------------------------------------------------------------

for(i in 1:10){

sim = readRDS(paste0("dissertação/x_parte_",i,".RDS"))

likelihood_ratio <- function(x, parameters,correction=FALSE){
  loglike=function(y,media,var){
    -0.5*sum(log(var)) -0.5*sum(((media-y)^2)/var)}
  theta=coef(x) %>% data.frame(nome=names(.),valor=.) %>% tidyr::spread(nome,valor)
  par_teste = dplyr::bind_rows(theta,parameters) %>% dplyr::summarise_all(funs(tail(na.omit(.),1)))
  p=length(theta)
  q=length(parameters)
  data=x$data
  
  mu=x$fitted.values
  var=Matrix::diag(x$var)
  mu0=x$funcao_mu(par_teste,x$data)
  var0=Matrix::diag(x$funcao_sigma(par_teste,x$data))
  y=x$target
  
  l1=loglike(y,mu,var)
  l0=loglike(y,mu0,var0)
  
  LR=2*(l1-l0)
  pv=pchisq(LR,df = q,lower.tail = F)
  
  if(correction==FALSE){return(list(LR=LR,p.value=pv))}
  
  ####Skovgaard correction:
  z=x$target-x$fitted.values
  z0=z+mu-mu0
  z0=x$target-mu0
  u0=(z0^2)/var0
  P=sqrt(var)
  P0=Matrix::diag(x$funcao_sigma(par_teste,x$data))^0.5
  Pd=0.5*diag(1/sqrt(var))%*%x$funcao_V(theta,data)
  a=(y-x$fitted.values)/P
  u00=(a^2)*(P0^2)/var0
  
  T=x$funcao_D(theta,data)+z*x$funcao_V(theta,data)/var
  T00=x$funcao_D(par_teste,data)+a*P0*x$funcao_V(par_teste,data)/var0
  
  B=-z*x$funcao_D(theta,data) -0.5*x$funcao_V(theta,data)
  B00=-z0*x$funcao_D(par_teste,data) -0.5*x$funcao_V(par_teste,data)
  A=-x$funcao_V(theta,data)/var^2
  A0=-x$funcao_V(par_teste,data)/var0^2
  
  aux1=rep(1:length(theta),length(theta))
  aux2=rep(1:length(theta),each=length(theta))
  Ad = -2*A[,aux1]*x$funcao_V(theta,data)[,aux2]/var
  Ad = Ad - x$funcao_C(theta,data)/var^2
  Ad0 = -2*A0[,aux1]*x$funcao_V(par_teste,data)[,aux2]/var0
  Ad0 = Ad0 - x$funcao_C(par_teste,data)/var0^2
  
  E = -0.5*(Ad*(var-z^2)) - x$funcao_D2(theta,data)*z/var
  E00 = -0.5*(Ad0*(var0-(a*P0)^2)) - x$funcao_D2(par_teste,data)*a*P0/var0
  G = apply(B[,aux1]*A[,aux2] + E,2,sum) %>% matrix(nrow=length(theta))
  G00 = apply(B00[,aux1]*A0[,aux2] + E00,2,sum) %>% matrix(nrow=length(theta))
  
  R = Pd*a + x$funcao_D(theta,data)
  
  Q = x$funcao_D(theta,data)+z*x$funcao_V(theta,data)/var
  Q00 = x$funcao_D(par_teste,data)+z0*x$funcao_V(par_teste,data)/var0
  
  Ud0 = Matrix::t(Q00/var0)%*%R
  U0= Matrix::t(x$funcao_F(par_teste,data)) %*% x$funcao_H(x$funcao_sigma(par_teste,data)) %*% x$funcao_s(mu0,x$funcao_sigma(par_teste,data),par_teste,all = F)
  J00 = Matrix::t(T00/var0)%*%x$funcao_D(par_teste,data) + G00
  J = Matrix::t(T)%*%solve(x$var)%*%x$funcao_D(theta,data) + G
  
  ld = Matrix::t(R/var)%*%(-z)
  ld0 = Matrix::t(R/var0)%*%(-z0)
  
  w=which(!names(theta) %in% names(parameters))
  
  J00=as.matrix(J00)
  p1=det(J)^0.5*det(Ud0)^-1*det(J[w,w])^0.5*det(J00[w,w])^-0.5*det(J00)^0.5
  p2=(t(U0)%*%solve(J00,tol=1e-200) %*% U0)^(p/2)
  p3=LR^(q/2-1)
  p4=t(ld-ld0)%*%Matrix::solve(Ud0,tol=1e-200)%*%U0
  rho=p1*p2/(p3*p4)
  LR2=LR-2*log(rho)[1,1]
  
  pv2=tryCatch(pchisq(LR2,df = q,lower.tail = F), error=function(e)NA)
  
  erro=0 + (p1<0) + 2*(p2[1,1]<0) + 3*(p3<0) + 4*(p4[1,1]<0)
  erro= paste0(1*(p1<0),1*(p2[1,1]<0),1*(p3<0),1*(p4[1,1]<0))
  out = list(LR=LR,p_value=pv, LR_correction=LR2, p_value_correction=pv2,erro=erro)
  
  class(out) = "lr_ratio"
  return(out)
}

gerar_parametros = function(x){
  lapply(x,function(x){
    n_amostra=length(x)
    lapply(1:n_amostra,function(i){
      z=x[[i]]
      if(is.na(z$modelo))
        return(expand.grid(n=z$n,p=z$p,valor=NA,par=c("beta1", "beta2", "sigma1", "sigma2"),tipo=c("reg_geral","reg_geral_bc"),amostra=i))
      data.frame(
        n=z$n,
        p=z$p,
        valor=c(z$coef,z$coef_bc),
        par=names(c(z$coef,z$coef_bc)),
        tipo=c(rep("reg_geral",length(z$coef)),
               rep("reg_geral_bc",length(z$coef_bc))),
        stringsAsFactors = F) %>% dplyr::mutate(amostra=i)}) %>%
      dplyr::bind_rows()}) %>% dplyr::bind_rows()
}

gerar_erros=function(saida){
  lapply(saida,function(x){
    n_amostra=length(x)
    lapply(1:n_amostra,function(i){
      z=x[[i]]
      if(is.na(z$modelo))
        return(data.frame(n=z$n,p=z$p,dif=NA,dif_bc=NA,conv=0,it=NA,amostra=i))
      data.frame(
        n=z$n,
        p=z$p,
        dif=z$dif_par,
        dif_bc=z$dif_bc,
        conv=1,
        it=z$modelo$iteracao,
        stringsAsFactors = F) %>% dplyr::mutate(amostra=i)}) %>%
      dplyr::bind_rows()}) %>% dplyr::bind_rows()}

teste2 = gerar_parametros(sim)

teste3 = gerar_erros(sim)

teste1=teste3 %>% filter(conv==1) %>% group_by(n) %>% sample_n(1)
teste1 = lapply(1:5,function(i){
  sim[[i]][[teste1$amostra[i]]]$modelo$data %>% mutate(n=teste1$n[i])
}) %>% bind_rows()

teste4=lapply(sim,function(z){
  bind_rows(lapply(z,function(x){
  if(length(x$modelo)==1) return(data.frame(n=x$n,p=x$p,pv=NA,pvc=NA,erro=NA))
  fit=likelihood_ratio(x$modelo,
                   list(beta1=-0.21,beta2=0.01,sigma1=4.2,sigma2=0.008),
                   correction=TRUE)
  data.frame(n=x$n,p=x$p,pv=fit$p_value,pvc=fit$p_value_correction,erro=fit$erro)}))}) %>%
  bind_rows

if(i==1){

  list(teste1,teste2,teste3,teste4) %>% saveRDS("dissertação/x_resumo.RDS")
    
  
}

if(i>1){
  antes=readRDS("dissertação/x_resumo.RDS")
  teste1=bind_rows(antes[[1]],teste1)
  teste2=bind_rows(antes[[2]],teste2)
  teste3=bind_rows(antes[[3]],teste3)
  teste4=bind_rows(antes[[4]],teste4)
  list(teste1,teste2,teste3,teste4) %>% saveRDS("dissertação/x_resumo.RDS")
}


cat("Passo:",i,"completo\n")

rm(list=ls())
gc()

}


teste=bind_rows(
  readRDS("dissertação/lr_x_parte_1.RDS"),
  readRDS("dissertação/lr_x_parte_2.RDS"),
  readRDS("dissertação/lr_x_parte_3.RDS"),
  readRDS("dissertação/lr_x_parte_4.RDS"),
  readRDS("dissertação/lr_x_parte_5.RDS"),
  readRDS("dissertação/lr_x_parte_6.RDS"),
  readRDS("dissertação/lr_x_parte_7.RDS"),
  readRDS("dissertação/lr_x_parte_8.RDS"),
  readRDS("dissertação/lr_x_parte_9.RDS"),
  readRDS("dissertação/lr_x_parte_10.RDS")
)

teste=lapply(sim[[1]],function(x){
    if(length(x$modelo)==1) return(data.frame(n=NA,pv=NA,pvc=NA))
    fit=likelihood_ratio(x$modelo,
                         list(beta1=-0.209294,beta2=0.01052326,sigma1=4.23850710,sigma2=0.00749964),
                         #list(beta1=-0.21,beta2=0.01,sigma1=4.2,sigma2=0.007),
                         correction=TRUE)
    data.frame(n=nrow(x$modelo$data),pv=fit$p_value,pvc=fit$p_value_correction)}) %>% bind_rows

teste %>% 
  distinct() %>%
  mutate(aux=is.na(pvc),
         pv1=pv<=0.01,
         pvc1=pvc<=0.01,
         pv5=pv<=0.05,
         pvc5=pvc<=0.05,
         pv10=pv<=0.1,
         pvc10=pvc<=0.1) %>%
  select(-pv,-pvc) %>%
  filter(!is.na(n)) %>%
  group_by(n) %>%
  summarise_all(funs(mean(.,na.rm=TRUE))) %>% View
  write.table("clipboard",sep="\t",dec=",",row.names=F)

teste %>%
  gather(tipo,pvalor,pv,pvc) %>% 
  na.omit %>%
  {ggplot(.,aes(pvalor,fill=tipo)) + geom_histogram(aes(y=..ndensity..))+facet_grid(n~tipo)}

teste %>% 
  filter(!is.na(n)) %>%
  group_by(n) %>%
  summarise_at(c("pv","pvc"),funs(swfscMisc::uniform.test(hist(.))$p.value))


tapply(teste$pv,is.na(teste$pvc),summary)

parametros=lapply(x,gerar_parametros)

vline=list(beta1=-0.209294,beta2=0.01052326,sigma1=4.23850710,sigma2=0.00749964) %>% 
  data.frame(par=names(.),valor=unlist(.),stringsAsFactors = F)
parametros %>%
  bind_rows() %>%
  ungroup %>%
  na.omit() %>%
  mutate(amostra=factor(n)) %>%
{ggplot(.,aes(valor,x=amostra)) +geom_boxplot(aes(colour=tipo)) + facet_wrap(~par,scales = "free",labeller = label_parsed) + 
    geom_hline(aes(yintercept = valor), data=vline,color="red")}
parametros %>%
  bind_rows() %>% 
  left_join(vline %>% rename(real=valor)) %>%
  #mutate(erro=(valor-real)/real) %>%
  mutate(erro=(valor-real)) %>%
  group_by(n,par,tipo) %>%
  summarise(vies=(mean(valor,na.rm=T)-mean(real,na.rm=T))/mean(real,na.rm=T),
            erro=sqrt(mean(erro^2,na.rm=T))) %>%
  ungroup %>%
  gather(metrica,valor,vies,erro) %>%
  filter(valor!=0) %>%
  unite(aux,metrica,tipo) %>%
  spread(aux,valor) %>% View


# Teste -------------------------------------------------------------------

fit2$parameters
likelihood_ratio(x,list(beta1=-0.21,beta2=0.01,sigma1=4.2,sigma2=0.008),correction = TRUE)

likelihood_ratio(x[[1]][[81]]$modelo,list(beta1=-0.209294,beta2=0.01052326,sigma1=4.23850710,sigma2=0.00749964),correction = TRUE)
x=readRDS("exemplo.RDS")
parameters=list(beta1=-0.209294,beta2=0.01052326,sigma1=4.23850710,sigma2=0.00749964)



