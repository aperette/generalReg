qnorm(0.975)
1-(1-0.9)/2
1-(1-0.95)/2
(1-0.95)/2
confint.lm(fit.lm,parm = 2,level = 0.90) %>% str
confint.lm(fit.lm,level = 0.90) %>% str
devtools::document()
warnings()
library(generalReg)
fit.SM =reg_general(y~log(b0 +b1*x,b2),~exp(sigma1+sigma2*x),data=BD.SM,
start = list(b0=-1.352,b1=1.188,b2=exp(1),sigma1=log(0.3458872),sigma2=0.0),
bias_correction = T,
method="NR",
control=list(reltol = 1e-10, max_it = 5000,kappa='AUTO',verbose=10))
confint(fit.SM)
vcov(fit.SM)
library(generalReg)
confint(fit.SM)
vcov(fit.SM)
vcov(fit.lm)
confint(fit.SM)
library(generalReg)
confint(fit.SM)
logLik(fit.lm)
logLik(fit.lm) %>% str
x=logLik(fit.lm)
x
x+1
help(logLik)
loglik.lm
logLik.lm
aux=function(x=1){x^2}
aux
sapply(1:4,lisy)
sapply(1:4,list)
fit.SM$function_H
library(generalReg)
fit.SM =reg_general(y~log(b0 +b1*x,b2),~exp(sigma1+sigma2*x),data=BD.SM,
start = list(b0=-1.352,b1=1.188,b2=exp(1),sigma1=log(0.3458872),sigma2=0.0),
bias_correction = T,
method="NR",
control=list(reltol = 1e-10, max_it = 5000,kappa='AUTO',verbose=10))
confint(fit.SM)
library(generalReg)
confint(fit.SM)
confint(fit.SM)
library(generalReg)
confint(fit.SM,bias_correction = T)
confint(fit.SM,bias_correction = F)
confint(fit.SM,bias_correction = "both")
library(generalReg)
confint(fit.SM,bias_correction = "both")
confint(fit.SM,bias_correction = F)
confint(fit.SM,bias_correction = T)
library(generalReg)
confint(fit.SM)
vcov(fit.SM)
vcov(fit.SM)
library(generalReg)
library(generalReg)
vcov(fit.SM)
teste1=generalReg::likelihood_ratio(fit.SM,list(b2=3.45807),correction = T)
teste1=generalReg::likelihood_ratio(fit.SM,list(b2=3.45807),correction = T)
teste2=generalReg::likelihood_ratio(fit.SM,list(sigma2=0.07186729),correction = T)
library(generalReg)
teste1=generalReg::likelihood_ratio(fit.SM,list(b2=3.45807),correction = T)
fit.SM =reg_general(y~log(b0 +b1*x,b2),~exp(sigma1+sigma2*x),data=BD.SM,
start = list(b0=-1.352,b1=1.188,b2=exp(1),sigma1=log(0.3458872),sigma2=0.0),
bias_correction = T,
method="NR",
control=list(reltol = 1e-10, max_it = 5000,kappa='AUTO',verbose=10))
teste1=generalReg::likelihood_ratio(fit.SM,list(b2=3.45807),correction = T)
teste2=generalReg::likelihood_ratio(fit.SM,list(sigma2=0.07186729),correction = T)
teste2
teste1
fit.SM$functions$function_loglike
library(generalReg)
fit.SM %>% logLik
devtools::document
devtools::document()
library(generalReg)
fit.SM %>% logLik
fit.SM %>% logLik(bias_correction=T)
fit.SM$loglike
fit.lm %>% logLik
dnorm(fit.SM$target,fit.SM$fitted.values,sqrt(Matrix::diag(fit.SM$var)),log = T)
dnorm(fit.SM$target,fit.SM$fitted.values,sqrt(Matrix::diag(fit.SM$var)),log = T) %>% sum
help(dnorm)
fit.SM$functions$function_loglike
library(generalReg)
fit.SM$loglike
fit.SM %>% logLik
fit.SM %>% logLik(bias_correction=T)
confint(fit.lm,level = 2)
confint(fit.lm,level = -1)
fit.SM =reg_general(y~log(b0 +b1*x,b2),~exp(sigma1+sigma2*x),data=BD.SM,
start = list(b0=-1.352,b1=1.188,b2=exp(1),sigma1=log(0.3458872),sigma2=0.0),
bias_correction = T,
method="NR",
control=list(reltol = 1e-10, max_it = 5000,kappa=2,verbose=10))
5
vcov(fit.SM)
confint(fit.SM,2)
library(generalReg)
lista = readRDS("../teste_skov.RDS")
attach(lista)
A
par(mfrow=c(1,2))
hist(A[,1], prob=TRUE,main="P-valor (Sem correção)", xlab="p-valor")
hist(A[,2], prob=TRUE,main="P-valor (LR corrigida)", xlab="p-valor")
par(mfrow=c(1,2))
hist(A2[,1], prob=TRUE,main="P-valor (Sem correção)", xlab="p-valor")
hist(A2[,2], prob=TRUE,main="P-valor (LR corrigida)", xlab="p-valor")
lista = readRDS("../teste_skov2.RDS")
attach(lista)
par(mfrow=c(1,2))
hist(A[,1], prob=TRUE,main="P-valor (Sem correção)", xlab="p-valor")
hist(A[,2], prob=TRUE,main="P-valor (LR corrigida)", xlab="p-valor")
par(mfrow=c(1,2))
hist(A2[,1], prob=TRUE,main="P-valor (Sem correção)", xlab="p-valor")
hist(A2[,2], prob=TRUE,main="P-valor (LR corrigida)", xlab="p-valor")
lista = readRDS("../teste_skov.RDS")
lista1 = readRDS("../teste_skov2.RDS")
A[,3]=lista$A[,2]
A=lista$A
A2=lista$A2
lista1 = readRDS("../teste_skov2.RDS")
A[,3]=lista1$A[,2]
lista1$A[,2]
A[,3]
A[,3]
A=cbind(A,lista1$A[,2])
A2=cbind(A2,lista1$A2[,2])
par(mfrow=c(1,3))
hist(A[,1], prob=TRUE,main="P-valor (Sem correção)", xlab="p-valor")
hist(A[,2], prob=TRUE,main="P-valor (LR corrigida)", xlab="p-valor")
hist(A[,3], prob=TRUE,main="P-valor (LR corrigida TESTE)", xlab="p-valor")
par(mfrow=c(1,3))
hist(A2[,1], prob=TRUE,main="P-valor (Sem correção)", xlab="p-valor")
hist(A2[,2], prob=TRUE,main="P-valor (LR corrigida)", xlab="p-valor")
hist(A2[,3], prob=TRUE,main="P-valor (LR corrigida TESTE)", xlab="p-valor")
lista = readRDS("../teste_skov.RDS")
A=lista$A
A2=lista$A2
lista1 = readRDS("../teste_skov2.RDS")
A=cbind(A,lista1$A[,2])
A2=cbind(A2,lista1$A2[,2])
par(mfrow=c(1,3))
hist(A[,1], prob=TRUE,main="P-valor (Sem correção)", xlab="p-valor")
hist(A[,2], prob=TRUE,main="P-valor (LR corrigida)", xlab="p-valor")
hist(A[,3], prob=TRUE,main="P-valor (LR corrigida TESTE)", xlab="p-valor")
par(mfrow=c(1,3))
hist(A2[,1], prob=TRUE,main="P-valor (Sem correção)", xlab="p-valor")
hist(A2[,2], prob=TRUE,main="P-valor (LR corrigida)", xlab="p-valor")
hist(A2[,3], prob=TRUE,main="P-valor (LR corrigida TESTE)", xlab="p-valor")
lista$A %>% head()
require(magrittr)
lista$A %>% head()
lista1$A %>% head()
hist(A[,1], prob=TRUE,main="P-valor (Sem correção)", xlab="p-valor")
hist(A[,2], prob=TRUE,main="P-valor (LR corrigida)", xlab="p-valor")
hist(A[,3], prob=TRUE,main="P-valor (LR corrigida TESTE)", xlab="p-valor")
likelihood_ratio <- function(x, parameters,correction=FALSE,control=NULL,start=NULL){
if(class(x)!="genReg")
stop("x must be a genReg class",call. = F)
par_teste=parameters
formula=Reduce(paste, deparse(x$inputs$formula))
formula_var=Reduce(paste, deparse(x$inputs$formula_var))
equals_par = names(parameters)[names(parameters) %in% names(x$parameters)]
dif_par = names(x$parameters)[!names(x$parameters) %in% equals_par]
wrong_par = names(parameters)[!names(parameters) %in% names(x$parameters)]
if(length(wrong_par)>1) stop(paste0("Parameter ",dif_par[1]," not found"),call. = F)
if(length(equals_par)<length(x$parameters)){
for(i in 1:length(equals_par)){
formula=stringr::str_replace_all(formula,equals_par[i],as.character(parameters[[equals_par[i]]]))
formula_var=stringr::str_replace_all(formula_var,equals_par[i],as.character(parameters[[equals_par[i]]]))
}
if(!is.null(control$reltol)) x$inputs$control$reltol=control$reltol
if(!is.null(control$max_it)) x$inputs$control$max_it=control$max_it
if(!is.null(control$kappa)) x$inputs$control$kappa=control$kappa
x$inputs$start = x$inputs$start[dif_par]
if(is.null(start)) start=x$inputs$start
control=x$inputs$control
control$verbose=0
cat("MLE under H0:\n")
x2=generalReg::reg_general(
formula=as.formula(formula),
formula_var=as.formula(formula_var),
start=x$inputs$start,
data=x$data,
control=control)
cat(paste(names(coef(x2)),round(coef(x2),3),sep=":",collapse="  "),"\n")
par_teste = coef(x2) %>% data.frame(nome=names(.),valor=.) %>% tidyr::spread(nome,valor) %>% merge(parameters)
}
loglike=function(y,media,var){
sum(dnorm(y,mean=media,sqrt(var),log=T))}
theta=coef(x) %>% data.frame(nome=names(.),valor=.) %>% tidyr::spread(nome,valor)
p=length(theta)
q=length(parameters)
data=x$data
mu=x$fitted.values
var=Matrix::diag(x$var)
mu0=x$functions$function_mu(par_teste,x$data)
var0=Matrix::diag(x$functions$function_sigma(par_teste,x$data))
y=x$target
l1=loglike(y,mu,var)
l0=loglike(y,mu0,var0)
LR=2*(l1-l0)
if(LR<0) stop("Likelihood ratio test statistic is negative",call. = F)
pv=pchisq(LR,df = q,lower.tail = F)
w=which(!names(theta) %in% names(parameters))
#return(list(q=q,p=p,w=w))
if(correction==FALSE){return(list(LR=LR,p_value=pv))}
####Skovgaard correction:
z=x$target-x$fitted.values
z0=z+mu-mu0
u0=(z0^2)/var0
P=sqrt(var)
P0=Matrix::diag(x$functions$function_sigma(par_teste,x$data))^0.5
Pd=0.5*diag(1/sqrt(var))%*%x$functions$function_V(theta,data)
a=(y-x$fitted.values)/P
u00=(a^2)*(P0^2)/var0
T=x$functions$function_D(theta,data)+z*x$functions$function_V(theta,data)/var
T0==x$functions$function_D(par_teste,data)+z0*x$functions$function_V(par_teste,data)/var0
T00=x$functions$function_D(par_teste,data)+a*P0*x$functions$function_V(par_teste,data)/var0
B=-z*x$functions$function_D(theta,data) -0.5*x$functions$function_V(theta,data)
B00=-a*P0*x$functions$function_D(par_teste,data) -0.5*x$functions$function_V(par_teste,data)
A=-x$functions$function_V(theta,data)/var^2
A0=-x$functions$function_V(par_teste,data)/var0^2
aux1=rep(1:length(theta),length(theta))
aux2=rep(1:length(theta),each=length(theta))
Ad = -2*A[,aux1]*x$functions$function_V(theta,data)[,aux2]/var
Ad = Ad - x$functions$function_C(theta,data)/var^2
Ad0 = -2*A0[,aux1]*x$functions$function_V(par_teste,data)[,aux2]/var0
Ad0 = Ad0 - x$functions$function_C(par_teste,data)/var0^2
E = -0.5*(Ad*(var-z^2)) - x$functions$function_D2(theta,data)*z/var
E00 = -0.5*(Ad0*(var0-(a*P0)^2)) - x$functions$function_D2(par_teste,data)*a*P0/var0
G = apply(B[,aux1]*A[,aux2] + E,2,sum) %>% matrix(nrow=length(theta))
G00 = apply(B00[,aux1]*A0[,aux2] + E00,2,sum) %>% matrix(nrow=length(theta))
#Teste
B0=-z0*x$functions$function_D(par_teste,data) -0.5*x$functions$function_V(par_teste,data)
E0 = -0.5*(Ad0*(var0-(z0)^2)) - x$functions$function_D2(par_teste,data)*z0/var0
G0 = apply(B0[,aux1]*A0[,aux2] + E0,2,sum) %>% matrix(nrow=length(theta))
R = Pd*a + x$functions$function_D(theta,data)
Q = x$functions$function_D(theta,data)+z*x$functions$function_V(theta,data)/var
Q00 = x$functions$function_D(par_teste,data)+a*P0*x$functions$function_V(par_teste,data)/var0
#Q00 = x$functions$function_D(par_teste,data)+z0*x$functions$function_V(par_teste,data)/var0
Ud0 = Matrix::t(Q00)%*%solve(x$functions$function_sigma(par_teste,data))%*%R
U0= Matrix::t(x$functions$function_F(par_teste,data)) %*% x$functions$function_H(x$functions$function_sigma(par_teste,data)) %*% x$functions$function_s(mu0,x$functions$function_sigma(par_teste,data),par_teste,all = F)
J00 = Matrix::t(T00)%*%solve(x$functions$function_sigma(par_teste,data))%*%x$functions$function_D(par_teste,data) + G00
J0 = Matrix::t(T0)%*%solve(x$functions$function_sigma(par_teste,data))%*%x$functions$function_D(par_teste,data) + G0
J = Matrix::t(T)%*%solve(x$var)%*%x$functions$function_D(theta,data) + G
ld = Matrix::t(R)%*%solve(x$var)%*%(-z)
ld0 = Matrix::t(R)%*%solve(x$functions$function_sigma(par_teste,data))%*%(-z0)
w=which(!names(theta) %in% names(parameters))
J00=as.matrix(J00)
p1=Matrix::det(J)^0.5*Matrix::det(Ud0)^-1*Matrix::det(J0[w,w])^0.5*Matrix::det(J00[w,w])^-0.5*Matrix::det(J00)^0.5
p2=(Matrix::t(U0)%*%solve(J00,tol=1e-200) %*% U0)^(p/2)
p3=LR^(q/2-1)
p4=Matrix::t(ld-ld0)%*%Matrix::solve(Ud0,tol=1e-20)%*%U0
rho=p1*p2[1,1]/(p3*p4[1,1])
LR2=LR-2*log(rho)
if((0 + (p1<0) + (p2[1,1]<0) + (p3<0) + (p4[1,1]<0))>0)
stop("Negative values are founded in Skovgaard's correction",call. = F)
if(LR2<0){
LR2=LR*(1-1/LR*log(rho))^2
warning("Correção quadrática utilizada",call. = F)
}
pv2=tryCatch(pchisq(LR2,df = q,lower.tail = F), error=function(e) NA)
out = list(LR=LR,p_value=pv, LR_correction=LR2, p_value_correction=pv2)
class(out) = "lr_ratio"
return(out)
}
require(insuranceData)
data(AutoBi)
#devtools::install_github("aperette/generalReg", force=TRUE)
require('generalReg')
require('gamlss')
AutoBi$ATTORNEY  <- as.factor(AutoBi$ATTORNEY  )
AutoBi$CLMSEX    <- as.factor( AutoBi$CLMSEX)
AutoBi$CLMINSUR  <- as.factor( AutoBi$CLMINSUR)
AutoBi$MARITAL   <- as.factor( AutoBi$MARITAL)
AutoBi$SEATBELT  <- as.factor( AutoBi$SEATBELT)
AutoBi <-  na.exclude(AutoBi)
attach(AutoBi)
XX = model.matrix(LOSS~ATTORNEY+CLMSEX+CLMINSUR+MARITAL+SEATBELT+CLMAGE)
BD <- data.frame(Y=log(LOSS),as.matrix(XX))
fit1=generalReg::reg_general(Y ~
beta1+beta2*ATTORNEY2,~exp(sigma1+sigma2*ATTORNEY2 ),data=BD,
start =
list(beta1=0.2,beta2=0.01,sigma1=4,sigma2=0.01),
bias_correction = T,
method="NR",
control=list(reltol = 1e-10, max_it =
5000,kappa='AUTO',verbose=10))
teste1=generalReg::likelihood_ratio(fit1,list(sigma2=0.0),correction = T)
N=100
A = matrix(0,N,2)
B = list()
A2 = matrix(0,N,2)
B2 = list()
# set.seed(125135)
# sementes=sample(1:1000000,N,replace = F)
# saveRDS(sementes,"../sementes.RDS")
sementes=readRDS("../sementes.RDS")
i=1
set.seed(sementes[i])
Y = XX[,1:2]%*%fit1$parameters[1:2] +
sqrt(exp(XX[,1]*fit1$parameters[3])) *rnorm(dim(XX)[1])
BD1 = data.frame(Y=Y, as.matrix(XX))
#Attorney
fit11 =generalReg::reg_general(Y ~
beta1+beta2*ATTORNEY2,~exp(sigma1+sigma2*ATTORNEY2 ),data=BD1,
start =
list(beta1=0.2,beta2=0.01,sigma1=4,sigma2=0.01),
bias_correction = T,
method="NR",
control=list(reltol = 1e-10, max_it =
5000,kappa='AUTO',verbose=FALSE))
teste11 =likelihood_ratio(fit11,list(sigma2=0.0),correction = T)
B[[i]] = confint(fit11)
A[i,] = c(teste11[[2]],teste11[[4]])
teste12 = likelihood_ratio(fit11,list(beta1=fit1$parameters[1],
beta2=fit1$parameters[2],
sigma1=fit1$parameters[3],
sigma2=0.0),correction = T)
likelihood_ratio <- function(x, parameters,correction=FALSE,control=NULL,start=NULL){
if(class(x)!="genReg")
stop("x must be a genReg class",call. = F)
par_teste=parameters
formula=Reduce(paste, deparse(x$inputs$formula))
formula_var=Reduce(paste, deparse(x$inputs$formula_var))
equals_par = names(parameters)[names(parameters) %in% names(x$parameters)]
dif_par = names(x$parameters)[!names(x$parameters) %in% equals_par]
wrong_par = names(parameters)[!names(parameters) %in% names(x$parameters)]
if(length(wrong_par)>1) stop(paste0("Parameter ",dif_par[1]," not found"),call. = F)
if(length(equals_par)<length(x$parameters)){
for(i in 1:length(equals_par)){
formula=stringr::str_replace_all(formula,equals_par[i],as.character(parameters[[equals_par[i]]]))
formula_var=stringr::str_replace_all(formula_var,equals_par[i],as.character(parameters[[equals_par[i]]]))
}
if(!is.null(control$reltol)) x$inputs$control$reltol=control$reltol
if(!is.null(control$max_it)) x$inputs$control$max_it=control$max_it
if(!is.null(control$kappa)) x$inputs$control$kappa=control$kappa
x$inputs$start = x$inputs$start[dif_par]
if(is.null(start)) start=x$inputs$start
control=x$inputs$control
control$verbose=0
cat("MLE under H0:\n")
x2=generalReg::reg_general(
formula=as.formula(formula),
formula_var=as.formula(formula_var),
start=x$inputs$start,
data=x$data,
control=control)
cat(paste(names(coef(x2)),round(coef(x2),3),sep=":",collapse="  "),"\n")
par_teste = coef(x2) %>% data.frame(nome=names(.),valor=.) %>% tidyr::spread(nome,valor) %>% merge(parameters)
}
loglike=function(y,media,var){
sum(dnorm(y,mean=media,sqrt(var),log=T))}
theta=coef(x) %>% data.frame(nome=names(.),valor=.) %>% tidyr::spread(nome,valor)
p=length(theta)
q=length(parameters)
data=x$data
mu=x$fitted.values
var=Matrix::diag(x$var)
mu0=x$functions$function_mu(par_teste,x$data)
var0=Matrix::diag(x$functions$function_sigma(par_teste,x$data))
y=x$target
l1=loglike(y,mu,var)
l0=loglike(y,mu0,var0)
LR=2*(l1-l0)
if(LR<0) stop("Likelihood ratio test statistic is negative",call. = F)
pv=pchisq(LR,df = q,lower.tail = F)
w=which(!names(theta) %in% names(parameters))
#return(list(q=q,p=p,w=w))
if(correction==FALSE){return(list(LR=LR,p_value=pv))}
####Skovgaard correction:
z=x$target-x$fitted.values
z0=z+mu-mu0
u0=(z0^2)/var0
P=sqrt(var)
P0=Matrix::diag(x$functions$function_sigma(par_teste,x$data))^0.5
Pd=0.5*diag(1/sqrt(var))%*%x$functions$function_V(theta,data)
a=(y-x$fitted.values)/P
u00=(a^2)*(P0^2)/var0
T=x$functions$function_D(theta,data)+z*x$functions$function_V(theta,data)/var
T0=x$functions$function_D(par_teste,data)+z0*x$functions$function_V(par_teste,data)/var0
T00=x$functions$function_D(par_teste,data)+a*P0*x$functions$function_V(par_teste,data)/var0
B=-z*x$functions$function_D(theta,data) -0.5*x$functions$function_V(theta,data)
B00=-a*P0*x$functions$function_D(par_teste,data) -0.5*x$functions$function_V(par_teste,data)
A=-x$functions$function_V(theta,data)/var^2
A0=-x$functions$function_V(par_teste,data)/var0^2
aux1=rep(1:length(theta),length(theta))
aux2=rep(1:length(theta),each=length(theta))
Ad = -2*A[,aux1]*x$functions$function_V(theta,data)[,aux2]/var
Ad = Ad - x$functions$function_C(theta,data)/var^2
Ad0 = -2*A0[,aux1]*x$functions$function_V(par_teste,data)[,aux2]/var0
Ad0 = Ad0 - x$functions$function_C(par_teste,data)/var0^2
E = -0.5*(Ad*(var-z^2)) - x$functions$function_D2(theta,data)*z/var
E00 = -0.5*(Ad0*(var0-(a*P0)^2)) - x$functions$function_D2(par_teste,data)*a*P0/var0
G = apply(B[,aux1]*A[,aux2] + E,2,sum) %>% matrix(nrow=length(theta))
G00 = apply(B00[,aux1]*A0[,aux2] + E00,2,sum) %>% matrix(nrow=length(theta))
#Teste
B0=-z0*x$functions$function_D(par_teste,data) -0.5*x$functions$function_V(par_teste,data)
E0 = -0.5*(Ad0*(var0-(z0)^2)) - x$functions$function_D2(par_teste,data)*z0/var0
G0 = apply(B0[,aux1]*A0[,aux2] + E0,2,sum) %>% matrix(nrow=length(theta))
R = Pd*a + x$functions$function_D(theta,data)
Q = x$functions$function_D(theta,data)+z*x$functions$function_V(theta,data)/var
Q00 = x$functions$function_D(par_teste,data)+a*P0*x$functions$function_V(par_teste,data)/var0
#Q00 = x$functions$function_D(par_teste,data)+z0*x$functions$function_V(par_teste,data)/var0
Ud0 = Matrix::t(Q00)%*%solve(x$functions$function_sigma(par_teste,data))%*%R
U0= Matrix::t(x$functions$function_F(par_teste,data)) %*% x$functions$function_H(x$functions$function_sigma(par_teste,data)) %*% x$functions$function_s(mu0,x$functions$function_sigma(par_teste,data),par_teste,all = F)
J00 = Matrix::t(T00)%*%solve(x$functions$function_sigma(par_teste,data))%*%x$functions$function_D(par_teste,data) + G00
J0 = Matrix::t(T0)%*%solve(x$functions$function_sigma(par_teste,data))%*%x$functions$function_D(par_teste,data) + G0
J = Matrix::t(T)%*%solve(x$var)%*%x$functions$function_D(theta,data) + G
ld = Matrix::t(R)%*%solve(x$var)%*%(-z)
ld0 = Matrix::t(R)%*%solve(x$functions$function_sigma(par_teste,data))%*%(-z0)
w=which(!names(theta) %in% names(parameters))
J00=as.matrix(J00)
p1=Matrix::det(J)^0.5*Matrix::det(Ud0)^-1*Matrix::det(J0[w,w])^0.5*Matrix::det(J00[w,w])^-0.5*Matrix::det(J00)^0.5
p2=(Matrix::t(U0)%*%solve(J00,tol=1e-200) %*% U0)^(p/2)
p3=LR^(q/2-1)
p4=Matrix::t(ld-ld0)%*%Matrix::solve(Ud0,tol=1e-20)%*%U0
rho=p1*p2[1,1]/(p3*p4[1,1])
LR2=LR-2*log(rho)
if((0 + (p1<0) + (p2[1,1]<0) + (p3<0) + (p4[1,1]<0))>0)
stop("Negative values are founded in Skovgaard's correction",call. = F)
if(LR2<0){
LR2=LR*(1-1/LR*log(rho))^2
warning("Correção quadrática utilizada",call. = F)
}
pv2=tryCatch(pchisq(LR2,df = q,lower.tail = F), error=function(e) NA)
out = list(LR=LR,p_value=pv, LR_correction=LR2, p_value_correction=pv2)
class(out) = "lr_ratio"
return(out)
}
teste11 =likelihood_ratio(fit11,list(sigma2=0.0),correction = T)
B[[i]] = confint(fit11)
A[i,] = c(teste11[[2]],teste11[[4]])
teste12 = likelihood_ratio(fit11,list(beta1=fit1$parameters[1],
beta2=fit1$parameters[2],
sigma1=fit1$parameters[3],
sigma2=0.0),correction = T)
A2[i,] = c(teste12[[2]],teste12[[4]])
N=100
A = matrix(0,N,2)
B = list()
A2 = matrix(0,N,2)
B2 = list()
# set.seed(125135)
# sementes=sample(1:1000000,N,replace = F)
# saveRDS(sementes,"../sementes.RDS")
sementes=readRDS("../sementes.RDS")
for(i in 1:N){
set.seed(sementes[i])
Y = XX[,1:2]%*%fit1$parameters[1:2] +
sqrt(exp(XX[,1]*fit1$parameters[3])) *rnorm(dim(XX)[1])
BD1 = data.frame(Y=Y, as.matrix(XX))
#Attorney
fit11 =generalReg::reg_general(Y ~
beta1+beta2*ATTORNEY2,~exp(sigma1+sigma2*ATTORNEY2 ),data=BD1,
start =
list(beta1=0.2,beta2=0.01,sigma1=4,sigma2=0.01),
bias_correction = T,
method="NR",
control=list(reltol = 1e-10, max_it =
5000,kappa='AUTO',verbose=FALSE))
teste11 =likelihood_ratio(fit11,list(sigma2=0.0),correction = T)
B[[i]] = confint(fit11)
A[i,] = c(teste11[[2]],teste11[[4]])
teste12 = likelihood_ratio(fit11,list(beta1=fit1$parameters[1],
beta2=fit1$parameters[2],
sigma1=fit1$parameters[3],
sigma2=0.0),correction = T)
A2[i,] = c(teste12[[2]],teste12[[4]])
print(i)}
saveRDS(list(A=A,A2=A2),"../teste_skov3.RDS")
lista = readRDS("../teste_skov.RDS")
A=lista$A
A2=lista$A2
lista1 = readRDS("../teste_skov2.RDS")
lista2 = readRDS("../teste_skov2.RDS")
A=cbind(A,lista1$A[,2],lista2$A[,2])
A2=cbind(A2,lista1$A2[,2],lista2$A2[,2])
par(mfrow=c(1,4))
hist(A[,1], prob=TRUE,main="P-valor (Sem correção)", xlab="p-valor")
hist(A[,2], prob=TRUE,main="P-valor (LR corrigida)", xlab="p-valor")
hist(A[,4], prob=TRUE,main="P-valor (LR corrigida TESTE2)", xlab="p-valor")
hist(A[,3], prob=TRUE,main="P-valor (LR corrigida TESTE)", xlab="p-valor")
hist(A2[,1], prob=TRUE,main="P-valor (Sem correção)", xlab="p-valor")
hist(A2[,2], prob=TRUE,main="P-valor (LR corrigida)", xlab="p-valor")
par(mfrow=c(1,4))
hist(A2[,3], prob=TRUE,main="P-valor (LR corrigida TESTE)", xlab="p-valor")
hist(A2[,4], prob=TRUE,main="P-valor (LR corrigida TESTE2)", xlab="p-valor")
lista = readRDS("../teste_skov.RDS")
A=lista$A
A2=lista$A2
lista1 = readRDS("../teste_skov2.RDS")
lista2 = readRDS("../teste_skov2.RDS")
A=cbind(A,lista1$A[,2],lista2$A[,2])
A2=cbind(A2,lista1$A2[,2],lista2$A2[,2])
par(mfrow=c(1,4))
hist(A[,1], prob=TRUE,main="P-valor (Sem correção)", xlab="p-valor")
hist(A[,2], prob=TRUE,main="P-valor (LR corrigida)", xlab="p-valor")
hist(A[,3], prob=TRUE,main="P-valor (LR corrigida TESTE)", xlab="p-valor")
hist(A[,4], prob=TRUE,main="P-valor (LR corrigida TESTE2)", xlab="p-valor")
par(mfrow=c(1,4))
hist(A2[,1], prob=TRUE,main="P-valor (Sem correção)", xlab="p-valor")
hist(A2[,2], prob=TRUE,main="P-valor (LR corrigida)", xlab="p-valor")
hist(A2[,3], prob=TRUE,main="P-valor (LR corrigida TESTE)", xlab="p-valor")
hist(A2[,4], prob=TRUE,main="P-valor (LR corrigida TESTE2)", xlab="p-valor")
