library(generalReg)
devtools::document()
devtools::document()
library(generalReg)
library(generalReg)
help(optim)
library(generalReg)
library(generalReg)
data=data.frame(
X=c(405.65, 498.75, 567.25, 618.3, 681.45,
405.65, 498.75, 567.25, 618.3, 681.45, 681.45, 681.45, 681.45,
681.45,681.45,681.45,681.45,681.45),
Y=c(90.5, 161.6, 246.743,
422.936, 868.662, 113.383, 207.65, 309.514, 460.686, 972.383,
999.633, 1034, 1047,1072.022,1133.287,1141.883,1266.290,1169.767))
theta_ini = list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01)
fit = generalReg::reg_general(Y~beta1*exp(beta2*X),~exp(sigma1+sigma2*X),data=data,
start = theta_ini,
bias_correction = F,control=list(parada = 0.001,verbose=0))
fit = generalReg::reg_general(Y~beta1*exp(beta2*X),~exp(sigma1+sigma2*X),data=data,
start = theta_ini,
bias_correction = F,control=list(parada = 0.001))
generalReg::likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01))
fit
generalReg::likelihood_ratio(fit,list(beta1=1))
generalReg::likelihood_ratio(fit,list(beta2=0.01))
generalReg::likelihood_ratio(fit,list(beta2=0.01,sigma1=log(8.3),sigma2=0.01))
coef(fit)
coef(fit)[1]
coef(fit)[1] %>% data.frame(nome=names(.),valor=.) %>% tidyr::spread(nome,valor)
fit2 = generalReg::reg_general(Y~beta1*exp(0.01*X),~exp(log(8.3)+0.01*X),data=data,
start = theta_ini,
bias_correction = F,control=list(parada = 0.001))
fit2 = generalReg::reg_general(Y~beta1*exp(0.01*X),~8.3*exp(0.01*X),data=data,
start = theta_ini,
bias_correction = F,control=list(parada = 0.001))
fit2 = generalReg::reg_general(Y~beta1*exp(0.01*X),~8.3*exp(0.01*X),data=data,
start = theta_ini,
bias_correction = F,control=list(parada = 0.001,kappa=0.2))
fit2 = generalReg::reg_general(Y~beta1*exp(0.01*X),~8.3*exp(0.01*X),data=data,
start = list(beta1=1),
bias_correction = F,control=list(parada = 0.001,kappa=0.2))
fit2
generalReg::likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01))
generalReg::likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01),correction = T)
likelihood_ratio <- function(x, parameters,correction=FALSE){
loglike=function(y,media,var){
-0.5*sum(log(var)) -0.5*sum(((media-y)^2)/var)}
theta=coef(x) %>% data.frame(nome=names(.),valor=.) %>% tidyr::spread(nome,valor)
par_teste = dplyr::bind_rows(theta,parameters) %>% dplyr::summarise_all(funs(tail(na.omit(.),1)))
p=length(theta)
q=length(parameters)
data=x$data
mu=x$fitted.values
var=Matrix::diag(x$var)
mu0=x$funcao_mu(par_teste,x$data)
var0=Matrix::diag(x$funcao_sigma(par_teste,x$data))
y=x$target
l1=loglike(y,mu,var)
l0=loglike(y,mu0,var0)
LR=2*(l1-l0)
pv=pchisq(LR,df = q,lower.tail = F)
if(correction==FALSE){return(list(LR=LR,p.value=pv))}
####Skovgaard correction:
z=x$target-x$fitted.values
z0=z+mu-mu0
z0=x$target-mu0
u0=(z0^2)/var0
P=sqrt(var)
P0=Matrix::diag(x$funcao_sigma(par_teste,x$data))^0.5
Pd=0.5*diag(1/sqrt(var))%*%x$funcao_V(theta,data)
a=(y-x$fitted.values)/P
u00=(a^2)*(P0^2)/var0
T=x$funcao_D(theta,data)+z*x$funcao_V(theta,data)/var
T00=x$funcao_D(par_teste,data)+a*P0*x$funcao_V(par_teste,data)/var0
B=-z*x$funcao_D(theta,data) -0.5*x$funcao_V(theta,data)
B00=-z0*x$funcao_D(par_teste,data) -0.5*x$funcao_V(par_teste,data)
A=-x$funcao_V(theta,data)/var^2
A0=-x$funcao_V(par_teste,data)/var0^2
aux1=rep(1:length(theta),length(theta))
aux2=rep(1:length(theta),each=length(theta))
Ad = -2*A[,aux1]*x$funcao_V(theta,data)[,aux2]/var
Ad = Ad - x$funcao_C(theta,data)/var^2
Ad0 = -2*A0[,aux1]*x$funcao_V(par_teste,data)[,aux2]/var0
Ad0 = Ad0 - x$funcao_C(par_teste,data)/var0^2
E = -0.5*(Ad*(var-z^2)) - x$funcao_D2(theta,data)*z/var
E00 = -0.5*(Ad0*(var0-(a*P0)^2)) - x$funcao_D2(par_teste,data)*a*P0/var0
G = apply(B[,aux1]*A[,aux2] + E,2,sum) %>% matrix(nrow=length(theta))
G00 = apply(B00[,aux1]*A0[,aux2] + E00,2,sum) %>% matrix(nrow=length(theta))
R = Pd*a + x$funcao_D(theta,data)
Q = x$funcao_D(theta,data)+z*x$funcao_V(theta,data)/var
Q00 = x$funcao_D(par_teste,data)+z0*x$funcao_V(par_teste,data)/var0
Ud0 = Matrix::t(Q00/var0)%*%R
U0= Matrix::t(x$funcao_F(par_teste,data)) %*% x$funcao_H(x$funcao_sigma(par_teste,data)) %*% x$funcao_s(mu0,x$funcao_sigma(par_teste,data),par_teste,all = F)
J00 = Matrix::t(T00/var0)%*%x$funcao_D(par_teste,data) + G00
J = Matrix::t(T)%*%solve(x$var)%*%x$funcao_D(theta,data) + G
ld = Matrix::t(R/var)%*%(-z)
ld0 = Matrix::t(R/var0)%*%(-z0)
w=which(!names(theta) %in% names(parameters))
J00=as.matrix(J00)
p1=det(J)^0.5*det(Ud0)^-1*det(J[w,w])^0.5*det(J00[w,w])^-0.5*det(J00)^0.5
p2=(t(U0)%*%solve(J00,tol=1e-200) %*% U0)^(p/2)
p3=LR^(q/2-1)
p4=t(ld-ld0)%*%Matrix::solve(Ud0,tol=1e-200)%*%U0
rho=p1*p2/(p3*p4)
LR2=LR-2*log(rho)[1,1]
pv2=tryCatch(pchisq(LR2,df = q,lower.tail = F), error=function(e)NA)
erro=0 + (p1<0) + 2*(p2[1,1]<0) + 3*(p3<0) + 4*(p4[1,1]<0)
erro= paste0(1*(p1<0),1*(p2[1,1]<0),1*(p3<0),1*(p4[1,1]<0))
out = list(LR=LR,p_value=pv, LR_correction=LR2, p_value_correction=pv2,erro=erro)
class(out) = "lr_ratio"
return(out)
}
likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01),correction = T)
require(tidyverse)
likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01),correction = T)
likelihood_ratio <- function(x, parameters,correction=FALSE){
loglike=function(y,media,var){
-0.5*sum(log(var)) -0.5*sum(((media-y)^2)/var)}
theta=coef(x) %>% data.frame(nome=names(.),valor=.) %>% tidyr::spread(nome,valor)
par_teste = dplyr::bind_rows(theta,parameters) %>% dplyr::summarise_all(funs(tail(na.omit(.),1)))
p=length(theta)
q=length(parameters)
data=x$data
mu=x$fitted.values
var=Matrix::diag(x$var)
mu0=x$function_mu(par_teste,x$data)
var0=Matrix::diag(x$function_sigma(par_teste,x$data))
y=x$target
l1=loglike(y,mu,var)
l0=loglike(y,mu0,var0)
LR=2*(l1-l0)
pv=pchisq(LR,df = q,lower.tail = F)
if(correction==FALSE){return(list(LR=LR,p.value=pv))}
####Skovgaard correction:
z=x$target-x$fitted.values
z0=z+mu-mu0
z0=x$target-mu0
u0=(z0^2)/var0
P=sqrt(var)
P0=Matrix::diag(x$function_sigma(par_teste,x$data))^0.5
Pd=0.5*diag(1/sqrt(var))%*%x$function_V(theta,data)
a=(y-x$fitted.values)/P
u00=(a^2)*(P0^2)/var0
T=x$function_D(theta,data)+z*x$function_V(theta,data)/var
T00=x$function_D(par_teste,data)+a*P0*x$function_V(par_teste,data)/var0
B=-z*x$function_D(theta,data) -0.5*x$function_V(theta,data)
B00=-z0*x$function_D(par_teste,data) -0.5*x$function_V(par_teste,data)
A=-x$function_V(theta,data)/var^2
A0=-x$function_V(par_teste,data)/var0^2
aux1=rep(1:length(theta),length(theta))
aux2=rep(1:length(theta),each=length(theta))
Ad = -2*A[,aux1]*x$function_V(theta,data)[,aux2]/var
Ad = Ad - x$function_C(theta,data)/var^2
Ad0 = -2*A0[,aux1]*x$function_V(par_teste,data)[,aux2]/var0
Ad0 = Ad0 - x$function_C(par_teste,data)/var0^2
E = -0.5*(Ad*(var-z^2)) - x$function_D2(theta,data)*z/var
E00 = -0.5*(Ad0*(var0-(a*P0)^2)) - x$function_D2(par_teste,data)*a*P0/var0
G = apply(B[,aux1]*A[,aux2] + E,2,sum) %>% matrix(nrow=length(theta))
G00 = apply(B00[,aux1]*A0[,aux2] + E00,2,sum) %>% matrix(nrow=length(theta))
R = Pd*a + x$function_D(theta,data)
Q = x$function_D(theta,data)+z*x$function_V(theta,data)/var
Q00 = x$function_D(par_teste,data)+z0*x$function_V(par_teste,data)/var0
Ud0 = Matrix::t(Q00/var0)%*%R
U0= Matrix::t(x$function_F(par_teste,data)) %*% x$function_H(x$function_sigma(par_teste,data)) %*% x$function_s(mu0,x$function_sigma(par_teste,data),par_teste,all = F)
J00 = Matrix::t(T00/var0)%*%x$function_D(par_teste,data) + G00
J = Matrix::t(T)%*%solve(x$var)%*%x$function_D(theta,data) + G
ld = Matrix::t(R/var)%*%(-z)
ld0 = Matrix::t(R/var0)%*%(-z0)
w=which(!names(theta) %in% names(parameters))
J00=as.matrix(J00)
p1=det(J)^0.5*det(Ud0)^-1*det(J[w,w])^0.5*det(J00[w,w])^-0.5*det(J00)^0.5
p2=(t(U0)%*%solve(J00,tol=1e-200) %*% U0)^(p/2)
p3=LR^(q/2-1)
p4=t(ld-ld0)%*%Matrix::solve(Ud0,tol=1e-200)%*%U0
rho=p1*p2/(p3*p4)
LR2=LR-2*log(rho)[1,1]
pv2=tryCatch(pchisq(LR2,df = q,lower.tail = F), error=function(e)NA)
erro=0 + (p1<0) + 2*(p2[1,1]<0) + 3*(p3<0) + 4*(p4[1,1]<0)
erro= paste0(1*(p1<0),1*(p2[1,1]<0),1*(p3<0),1*(p4[1,1]<0))
out = list(LR=LR,p_value=pv, LR_correction=LR2, p_value_correction=pv2,erro=erro)
class(out) = "lr_ratio"
return(out)
}
likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01),correction = T)
require(Matrix)
likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01),correction = T)
fit
likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=4.23783,sigma2=0.01),correction = T)
library(generalReg)
generalReg::likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01),correction = T)
data=data.frame(
X=c(405.65, 498.75, 567.25, 618.3, 681.45,
405.65, 498.75, 567.25, 618.3, 681.45, 681.45, 681.45, 681.45,
681.45,681.45,681.45,681.45,681.45),
Y=c(90.5, 161.6, 246.743,
422.936, 868.662, 113.383, 207.65, 309.514, 460.686, 972.383,
999.633, 1034, 1047,1072.022,1133.287,1141.883,1266.290,1169.767))
theta_ini = list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01)
fit = generalReg::reg_general(Y~beta1*exp(beta2*X),~exp(sigma1+sigma2*X),data=data,
start = theta_ini,
bias_correction = F,control=list(parada = 0.001))
generalReg::likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01),correction = T)
require(generalReg)
generalReg::likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01),correction = T)
require(Matrix)
generalReg::likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01),correction = T)
library(generalReg)
generalReg::likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01),correction = T)
library(generalReg)
generalReg::likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01),correction = T)
library(generalReg)
generalReg::likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01),correction = T)
library(generalReg)
generalReg::likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01),correction = T)
generalReg::likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01),correction = T)>0
library(generalReg)
generalReg::likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01),correction = T)
c(5)[1,1]
library(generalReg)
generalReg::likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01),correction = T)
library(generalReg)
generalReg::likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01),correction = T)
library(generalReg)
generalReg::likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01),correction = T)
generalReg::likelihood_ratio(fit,list(beta2=0.01,sigma1=log(8.3),sigma2=0.01))
fit2 = generalReg::reg_general(Y~beta1*exp(0.01*X),~8.3*exp(0.01*X),data=data,
start = list(beta1=1),
bias_correction = F,control=list(parada = 0.001,kappa=0.2))
coef(fit2)
coef(fit2)  %>% data.frame(nome=names(.),valor=.) %>% tidyr::spread(nome,valor) %>% merge(list(beta2=0.01,sigma1=log(8.3),sigma2=0.01))
library(generalReg)
generalReg::likelihood_ratio(fit,list(beta2=0.01,sigma1=log(8.3),sigma2=0.01))
library(generalReg)
data=data.frame(
X=c(405.65, 498.75, 567.25, 618.3, 681.45,
405.65, 498.75, 567.25, 618.3, 681.45, 681.45, 681.45, 681.45,
681.45,681.45,681.45,681.45,681.45),
Y=c(90.5, 161.6, 246.743,
422.936, 868.662, 113.383, 207.65, 309.514, 460.686, 972.383,
999.633, 1034, 1047,1072.022,1133.287,1141.883,1266.290,1169.767))
theta_ini = list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01)
fit = generalReg::reg_general(Y~beta1*exp(beta2*X),~exp(sigma1+sigma2*X),data=data,
start = theta_ini,
bias_correction = F,control=list(parada = 0.001))
warnings()
library(generalReg)
fit = generalReg::reg_general(Y~beta1*exp(beta2*X),~exp(sigma1+sigma2*X),data=data,
start = theta_ini,
bias_correction = F,control=list(parada = 0.001))
fit
fit2 = generalReg::reg_general(Y~beta1*exp(0.01*X),~8.3*exp(0.01*X),data=data,
start = list(beta1=1),
bias_correction = F,control=list(parada = 0.001,kappa=0.2))
fit2
generalReg::likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01),correction = T)
generalReg::likelihood_ratio(fit,list(beta2=0.01,sigma1=log(8.3),sigma2=0.01))
library(generalReg)
generalReg::likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01),correction = T)
generalReg::likelihood_ratio(fit,list(beta2=0.01,sigma1=log(8.3),sigma2=0.01))
generalReg::likelihood_ratio(fit,list(sigma1=log(8.3)))
library(generalReg)
generalReg::likelihood_ratio(fit,list(sigma1=log(8.3)))
generalReg::likelihood_ratio(fit,list(sigma1=log(8.3)),correction=T)
data=data.frame(
X=c(405.65, 498.75, 567.25, 618.3, 681.45,
405.65, 498.75, 567.25, 618.3, 681.45, 681.45, 681.45, 681.45,
681.45,681.45,681.45,681.45,681.45),
Y=c(90.5, 161.6, 246.743,
422.936, 868.662, 113.383, 207.65, 309.514, 460.686, 972.383,
999.633, 1034, 1047,1072.022,1133.287,1141.883,1266.290,1169.767))
theta_ini = list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01)
fit = generalReg::reg_general(Y~beta1*exp(beta2*X),~exp(sigma1+sigma2*X),data=data,
start = theta_ini,
bias_correction = F,control=list(parada = 0.001))
fit2 = generalReg::reg_general(Y~beta1*exp(0.01*X),~8.3*exp(0.01*X),data=data,
start = list(beta1=1),
bias_correction = F,control=list(parada = 0.001,kappa=0.2))
test=generalReg::likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01),correction = T)
test2=generalReg::likelihood_ratio(fit,list(beta1=1,beta2=0.01,sigma1=log(8.3),sigma2=0.01))
length(test)
length(test2)
test2
test
library(generalReg)
test
library(generalReg)
test
devtools::document()
library(generalReg)
test
test$p_value %>% round(5)
library(generalReg)
test
library(generalReg)
library(generalReg)
library(generalReg)
library(generalReg)
library(generalReg)
